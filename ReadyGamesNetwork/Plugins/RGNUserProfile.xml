<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNUserProfile</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.UserProfile.TryMergeUsersResponseData">
            <summary>
            Successfully merged users response data
            </summary>
        </member>
        <member name="F:RGN.Modules.UserProfile.TryMergeUsersResponseData.sourceUserId">
            <summary>
            The ID of the source user
            </summary>
        </member>
        <member name="F:RGN.Modules.UserProfile.TryMergeUsersResponseData.targetUserId">
            <summary>
            The ID of the target user
            </summary>
        </member>
        <member name="T:RGN.Modules.UserProfile.UserProfileModule">
            <summary>
            Represents a module for managing user profiles.
            </summary>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetProfileAsync(System.Threading.CancellationToken)">
            <summary>
            Returns user data for current authenticated user.
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Basic user data</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetProfileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns user data for provided user id. The base data contains some basic user info
            In case you want to request more information (like user coins) please use the
            <see cref="!:GetFullUserProfileAsync&lt;TFullProfileData&gt;(string)"/> method
            </summary>
            <param name="userId">User Id to get the data</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Basic user data</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetFullUserProfileAsync``1(System.Threading.CancellationToken)">
            <summary>
            Returns user full profile data for current authenticated user.
            The data contains user coins currencies information.
            You can use the <see cref="T:RGN.Modules.UserProfile.UserProfileData"/> as the generic parameter or
            implement your own serializable class to store additional data.
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown in case use is not logged in </exception>
            <returns>A generic TFullProfileData class contaning user's full profile for the userId specified.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetFullUserProfileAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns user full profile data for provided user id.
            The data contains user coins currencies information.
            You can use the <see cref="T:RGN.Modules.UserProfile.UserProfileData"/> as the generic parameter or
            implement your own serializable class to store additional data.
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <param name="userId">User Id to get the data</param>
            <returns>A generic TFullProfileData class contaning user's full profile for the userId specified.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SearchUsersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for users by their nickname.
            </summary>
            <param name="nicknameQuery">The query string to search for in user nicknames.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a List of UserData objects representing the matching users.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetUserCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of the currencies owned by the current user.
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a List of Currency objects representing the user's currencies.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetUserIdByShortUIDAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the user ID associated with a short UID.
            </summary>
            <param name="shortUID">The short UID to get the associated user ID for.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing the user ID associated with the short UID.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SetDisplayNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the display name of the user.
            </summary>
            <param name="displayName">The new display name of the user.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing the new display name of the user.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SetBioAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the bio of the user.
            </summary>
            <param name="bio">The new bio of the user.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing the new bio of the user.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SetDisplayNameAndBioAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the display name and bio of the user.
            </summary>
            <param name="displayName">The new display name of the user.</param>
            <param name="bio">The new bio of the user.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing the new display name of the user.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.UploadAvatarImageAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Uploads a user's avatar image to the RGNCore backend.
            </summary>
            <param name="bytes">The byte array of the avatar image to upload.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A boolean indicating whether the upload was successful.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.DownloadAvatarImageAsync(System.String,RGN.Model.ImageSize,System.Threading.CancellationToken)">
            <summary>
            Downloads the avatar image of a user as a byte array from Firebase storage.
            </summary>
            <param name="userId">The ID of the user whose avatar image to download.</param>
            <param name="size">The size type of avatar image to download.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the download operation.</param>
            <returns>A byte array containing the avatar image, or null if the download fails.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.ChangeAdminStatusByEmailAsync(System.String,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Changes the admin status and access level of a user by their email.
            </summary>
            <param name="email">The email of the user to modify.</param>
            <param name="isAdmin">True if the user should be made an admin, false otherwise.</param>
            <param name="accessLevel">The new access level for the user.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a Dictionary of key-value pairs representing the updated user data.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.ChangeAdminStatusByUserIdAsync(System.String,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Changes the admin status and access level of a user by their user ID.
            </summary>
            <param name="userId">The user ID of the user to modify.</param>
            <param name="isAdmin">True if the user should be made an admin, false otherwise.</param>
            <param name="accessLevel">The new access level for the user.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a Dictionary of key-value pairs representing the updated user data.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetUserCustomClaimsByUserIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the custom claims for a user by their user ID.
            </summary>
            <param name="userId">The user ID of the user to retrieve custom claims for.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a Dictionary of key-value pairs representing the user's custom claims.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetUserCustomClaimsByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the custom claims for a user by their email.
            </summary>
            <param name="email">The email of the user to retrieve custom claims for.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing a Dictionary of key-value pairs representing the user's custom claims.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SetInvisibleStatusAsync(System.Boolean)">
            <summary>
            Sets the invisible status for the current user.
            </summary>
            <param name="invisibleStatus">True if the user should be invisible, false otherwise.</param>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.PingAsync">
            <summary>
            Sends a ping to the server to update the user's status.
            </summary>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.SuspendAsync">
            <summary>
            Suspends the user's status updates.
            </summary>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.GetUserStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status of a user with the specified user ID.
            </summary>
            <param name="userId">The user ID of the user whose status to retrieve.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A Task containing the status of the user as a GetUserStatusResponseData object.</returns>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.DeleteUser(System.Threading.CancellationToken)">
            <summary>
            Deletes the user's account.
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:RGN.Modules.UserProfile.UserProfileModule.TryMergeUsersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to merge the current user account into the target user account
            </summary>
            <param name="targetUserIdToken">The target user id token</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
    </members>
</doc>
